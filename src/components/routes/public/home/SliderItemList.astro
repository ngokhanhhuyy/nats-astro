---
import { useHTMLUtils } from "@/utils/htmlUtils";

// Props.
type Props = { model: SliderItemDetailModel[] };

// Dependencies.
const { compute, joinHTMLClass } = useHTMLUtils();

// Computed.
const thumbnailUrls = compute<string[]>(() => {
  return Astro.props.model.map(sliderItem => sliderItem.thumbnailUrl);
});
---

<div class="container-fluid overflow-hidden position-relative bg-success p-0">
  {Astro.props.model.map((sliderItem, index) => (
    <div
      class={`carousel-background opacity-${index === 0 ? 100 : 0}`}
      style={`background: url(${sliderItem.thumbnailUrl})`}
      data-index={index}>
    </div>
  ))}
    
  <div
    class="carousel-container"
    id="carousel-container"
    data-thumbnail-urls={JSON.stringify(thumbnailUrls)}
  >
    <div
      id="slider" 
      class="carousel slide overflow-visible m-0 w-100 position-relative"
      data-bs-ride="carousel"
      data-bs-interval="5000"
    >  
      {/* Photos */}
      <div class="carousel-inner">
        {Astro.props.model.map((sliderItem, index) => (
          <div class={joinHTMLClass("carousel-item", index === 0 && "active")}>
            <img
              src={sliderItem.thumbnailUrl}
              class="carousel-img d-block w-100"
              alt="..."
            />
          </div>
        ))}
      </div>

      {/* IndicatorButtons */}
      <div class="carousel-indicators">
        {Astro.props.model.map((_, index) => (
          <button
            type="button"
            class={index === 0 ? "active" : undefined}
            data-bs-target="#slider"
            data-bs-slide-to={index}
            aria-current={index === 0}
            aria-label={`Slide ${index}`}>
          </button>
        ))}
      </div>

      {/* CarouoselControlButtons */}
      <button
        class="carousel-control-prev"
        type="button"
        data-bs-target="#slider"
        data-bs-slide="prev"
      >
        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
        <span class="visually-hidden">Previous</span>
      </button>
      <button
        class="carousel-control-next"
        type="button"
        data-bs-target="#slider"
        data-bs-slide="next"
      >
        <span class="carousel-control-next-icon" aria-hidden="true"></span>
        <span class="visually-hidden">Next</span>
      </button>
    </div>
  </div>
</div>

<style>
  .carousel-background {
    --blur-radius: 25px;
    background: rgba(var(--bs-success-rgb), 0.5);
    position: absolute;
    top: 50%;
    left: 50%;
    width: calc(100% + var(--blur-radius) * 4);
    height: calc(100% + var(--blur-radius) * 4);
    transform: translate(-50%, -50%);
    filter: blur(var(--blur-radius));
    transition: opacity 1s ease;
}

  .carousel-background::after {
    content: "";
    background: rgba(var(--bs-success-rgb), 0.5);
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
  }

  .carousel-container {
    width: 100%;
    max-width: 1400px;
    margin: auto;
  }

  .slide {
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.25);
  }

  .carousel-img {
    max-height: 750px;
    object-fit: cover;
  }
</style>

<script>
  import "bootstrap";

  const carouselContainerElement = document
    .getElementById("carousel-container") as HTMLDivElement;
  const carouselElement = document.getElementById("slider") as HTMLDivElement;
  const carouselBackgroundElements = document.getElementsByClassName("carousel-background");
  
  const thumbnailUrlsAsJSON = carouselContainerElement.getAttribute("data-thumbnail-urls");
  let thumbnailUrls: string[] = [];
  if (thumbnailUrlsAsJSON) {
    thumbnailUrls = JSON.parse(thumbnailUrlsAsJSON)
  }
  
  carouselElement.addEventListener("slide.bs.carousel", onCarouselSlide);
  
  function onCarouselSlide(e: Event) {
    const event = e as Event & { to: number };
    for (const element of carouselBackgroundElements) {
      if (parseInt(element.getAttribute("data-index") as string) === event.to) {
        element.classList.replace("opacity-0", "opacity-100");
      } else {
        element.classList.replace("opacity-100", "opacity-0");
      }
    }
  }
</script>