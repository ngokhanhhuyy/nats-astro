---
import { actions } from "astro:actions";
import { z, ZodNullable } from "astro:schema";
import { generateTokenAsync } from "@/services/authenticationService";
import { SignInModel } from "@/models/signInModels";
import { verifyToken } from "@/utils/jwtUtils";

let model = new SignInModel();
const tokenData = {
  generatedToken: null as string | null,
  requestedToken: Astro.cookies.get("Authorization")?.value ?? null,
  isAuthenticated: false
}


if (Astro.request.method === "GET") {
  model = new SignInModel();
} else {
  try {
    model.parse(await Astro.request.formData());
    tokenData.generatedToken = await generateTokenAsync(model.toRequestDto());
    Astro.cookies.set("Authorization", `Bearer ${tokenData.generatedToken}`);
    return Astro.redirect("/", 302);
  } catch (error) {
    if (error instanceof z.ZodError) {
      const errorMessages: Record<string, string> = {};
      for (const issue of error.issues) {
        const path = issue.path.map(segment => {
          return typeof segment === "string" ? segment : `[${segment}]`;
        }).join(".");

        errorMessages[path] = issue.message;
      }

      Astro.locals.modelErrorMessagesStore.setErrorMessages(errorMessages)
    } else {
      throw error;
    }
  }
}
---

<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  </head>
  <body>
    <div class="container">
      <pre>{JSON.stringify(model?.toRequestDto() ?? null, null, 2)}</pre>
      <pre>{JSON.stringify(tokenData, null, 2)}</pre>
      <pre>{JSON.stringify(Astro.locals.modelErrorMessagesStore ?? null, null, 2)}</pre>
      <form id="signInForm" method="post">
        <label for="userName">UserName</label>
        <input name="userName" id="userName" value={model?.userName} />
        <br />
        <label for="password">Password</label>
        <input name="password" id="password" type="password" />
        <br />
        <button type="submit">Submit</button>
      </form>

      <pre id="data"></pre>
      <pre id="error"></pre>
    </div>
  </body>
</html>

<style>
  body {
    background: rgba(0, 0, 0, 0.1);
    height: fit-content;
    min-height: 100%;
    padding: 0;
    margin: 0;
    display: flex;
    align-items: stretch;
    justify-content: center;
  }

  .container {
    background: white;
    width: 100%;
    max-width: 1200px;
    border-left: 1px solid rgba(0, 0, 0, 0.25);
    border-right: 1px solid rgba(0, 0, 0, 0.25);
    min-height: 100vh;
  }
</style>
