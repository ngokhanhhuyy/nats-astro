---
import { createSavedSuccessfullyPageModel }
  from "@/models/pageModels/savedSuccessfullyPageModels";
import { useHTMLUtils } from "@/utils/htmlUtils";
import { useRouteUtils } from "@/utils/routeUtils";
import { ValidationError } from "@/errors";

// Layout component.
import ProtectedLayout from "@/layouts/protected/ProtectedLayout.astro";
import MainBlock from "@/layouts/protected/MainBlock.astro";

// Dependencies.
const { compute, joinHTMLClass } = useHTMLUtils();
const routeUtils = useRouteUtils();

// Model.
let model: SavedSuccessfullyPageModel;
try {
  model = createSavedSuccessfullyPageModel(Astro.url.searchParams);
} catch (error) {
  if (error instanceof ValidationError) {
    return Astro.redirect(routeUtils.getNotFoundErrorRoutePath());
  }

  throw error;
}

const pageTitle = compute<string>(() => `${model.saveTypeDisplayName} dữ liệu thành công.`);
---

<ProtectedLayout pageTitle={pageTitle}>
  <div class="row g-3">
    <div class="col col-12">
      <MainBlock title={pageTitle} bodyPadding={0}>
        <div class="row g-3 p-3">
          <div class={joinHTMLClass(
            "col col-auto d-flex flex-shrink-0",
            "justify-content-center align-items-center text-success"
          )}>
            <i class="bi bi-info-circle-fill fs-2"></i>
          </div>

          <div class="col">
            Dữ liệu đã được {model.saveTypeDisplayName.toLowerCase()} thành công.
            <br/>
            Bạn sẽ được tự động đưa về trang
            <a href={model.returningUrl} id="returning-url">
              {model.returningPageDisplayName}
            </a> trong <span id="counter">[5]</span> giây.
          </div>
        </div>

        <div class="row g-0 border-top border-success-subtle">
          <div class="col col-12 p-2 d-flex justify-content-end">
            <a href={model.returningUrl} class="btn btn-success btn-sm">
              {model.returningPageDisplayName}
            </a>
          </div>
        </div>
      </MainBlock>
    </div>
  </div>
</ProtectedLayout>

<style>
  a:not(.btn) {
    color: var(--bs-success);
    text-decoration: none;
  }

  a:not(.btn):hover {
    text-decoration: underline;
  }
  
  #counter {
    color: var(--bs-success);
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const counterElement = document.getElementById("counter") as HTMLSpanElement;
    const returningAnchorElement = document
      .getElementById("returning-url") as HTMLAnchorElement;
    let count = parseInt(counterElement.textContent?.replace(/\[(.*)\]/, "$1") ?? "5");
    if (!count) {
      count = 5;
    }

    const interval = setInterval(() => {
      count -= 1;
      counterElement.textContent = `[${count}]`;

      if (count === 0) {
        clearInterval(interval);
        // location.href = returningAnchorElement.href;
      }
    }, 1000)
  });
</script>