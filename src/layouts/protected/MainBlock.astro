---
import type { HTMLAttributes } from "astro/types";
import { useHTMLUtils } from "@/utils/htmlUtils";

// Props.
type Props = {
  title: string;
  color?: "primary" | "success" | "danger";
  headerClass?: string;
  paginator?: boolean;
  bodyClass?: string;
  bodyPadding?: string | number | [number, number] | [number, number, number, number];
  bodyBorder?: boolean;
} & HTMLAttributes<"div">;
const { color = "success", "class": className, ...props } = Astro.props;

// Dependencies.
const { compute, joinHTMLClass } = useHTMLUtils();

// Computed.
const headerComputedClass = compute<string>(() => {
  let className = `bg-${color}-subtle border-${color}-subtle`;
  if (props.headerClass) {
    className += ` ${props.headerClass}`;
  }
  
  return className;
});

const bodyComputedClass = compute<string | null>(() => {
  const classNames: string[] = ["rounded-bottom-3 bg-white"];
  if (props.bodyClass) {
    classNames.push(props.bodyClass);
  }

  if (props.bodyBorder ?? true) {
    classNames.push(`border border-top-0 border-${color}-subtle`);
  }

  if (Array.isArray(props.bodyPadding)) {
    if (props.bodyPadding.length === 2) {
      const [x, y] = props.bodyPadding;
      classNames.push(`px-${x} py-${y}`);
    } else {
      const [top, end, bottom, start] = props.bodyPadding;
      classNames.push(`pt-${top} pe-${end} pb-${bottom} ps-${start}`);
    }
  } else if (props.bodyPadding != null) {
    classNames.push(`p-${props.bodyPadding}`);
  }

  return classNames.length ? classNames.join(" ") : null;
});
---

<div
  {...props}
  class={joinHTMLClass("block d-flex flex-column shadow-sm rounded-3", className)}
>
  <div class={joinHTMLClass(headerComputedClass, "block-header")}>
    <span class={joinHTMLClass("fw-bold small h-auto pt-1", `text-${color}`)}>
      {props.title.toUpperCase()}
    </span>

    <slot name="header"></slot>
  </div>

  <div class={bodyComputedClass} class="block-body flex-fill">
    <slot>
      <slot name="body"></slot>
    </slot>
  </div>
</div>

<style>
.block-header {
  background-color: rgba(var(--bs-success-rgb), 0.1);
  border: 1px solid rgba(var(--bs-success-rgb), 0.25);
  border-top-left-radius: var(--bs-border-radius-lg);
  border-top-right-radius: var(--bs-border-radius-lg);
  display: flex;
  justify-content: space-between;
  align-items: center;
  height: 45px;
  padding: .5rem;
  padding-left: .75rem;
}

.block-body {
  background-color: white;
  border: 1px solid rgba(var(--bs-success-rgb), 0.25);
  border-top-width: 0;
  border-bottom-left-radius: var(--bs-border-radius-lg);
  border-bottom-right-radius: var(--bs-border-radius-lg);
}
</style>